//
//  CatListPresenter.swift
//  TheCatPragma
//
//  Created by CarlosDz on 9/06/23.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import Foundation

final class CatListPresenter {

    // MARK: - Private properties -
    private unowned let view: CatListViewInterface
    private let interactor: CatListInteractorInterface
    private let wireframe: CatListWireframeInterface

    // MARK: - Public properties -
    var cats: [Cat] = []
    
    // MARK: - Lifecycle -
    init(
        view: CatListViewInterface,
        interactor: CatListInteractorInterface,
        wireframe: CatListWireframeInterface
    ) {
        self.view = view
        self.interactor = interactor
        self.wireframe = wireframe
    }
}

// MARK: - CatListPresenterInterface -
extension CatListPresenter: CatListPresenterInterface {
    
    func getCats() {
        interactor.getCats { [weak self] result in
            switch result {
            case .ok(let cats):
                self?.cats = cats
                self?.view.reloadData()
            case .error(let text):
                print("CEDA: -error: \(text)")
            }
        }
    }
    
    func getCatModel(index: IndexPath) -> CatCellModel {
        // FIXME: - Controlar que no pueda elegir un indice fuera de rango
        let cat = cats[index.row]
        return CatCellModel(
            name: cat.breedName ?? "",
            image: cat.imageUrl ?? "",
            intelligence: cat.intelligence ?? 0,
            origin: cat.origin ?? "")
    }
}
